// (ctrl j)

#import 'library/common.js'

/**
 * layout modifiers:
 *  -     export
 */

var PLUGIN_PATH = sketch.scriptPath.split('/').slice(0, -1).join('/')
var BASE_DIR = PLUGIN_PATH + '/exports/' + Document.name
                                         + '-' + Document.hashCode

var Android = {}

Android.factors = [
  {name: 'ldpi', scale: 0.375},
  {name: 'mdpi', scale: 0.5},
  {name: 'hdpi', scale: 0.75},
  {name: 'xhdpi', scale: 1.0},
  {name: 'xxhdpi', scale: 1.5},
  {name: 'xxxhdpi', scale: 2.0}
]

function progress(num){
  progress = [CHProgressSheet runForWindow:doc.window()
                                withObject:'exporting assets']
  [progress setProgressMaximum:num]
}

function askForPackageName(){
  var initial = getString('packageName', 'com.example.app')
  var package = [doc askForUserInput:'Package name?'
                        initialValue:initial]

  if (package == null) return false;

  writeString('packageName', package)

  return true
}

function askForRootActivity(){
  var initial = getString('rootActivity', '')
    , defaultChoice = 0
    , artboards = Document.artboards()
    , artboardNames = []

  _.each(artboards, function(artboard, i){
    artboardNames.push(artboard.name)
    if (initial.toString() === artboard.name.toString()) {
      defaultChoice = i
    }
  })

  var choice = ui.createMenu('What is the first screen?',
    artboardNames, defaultChoice)
  if (choice[0] === 1001) { return false; }

  var sel = choice[1]
  var activity = artboardNames[sel]

  writeString('rootActivity', activity)
  return true
}

function exportGroups(numberOfGroups){
  progress(numberOfGroups)
  _.each(Document.artboards(), function(artboard){
    _.each(exportableGroups(artboard.groups()), exportGroup)
  })
}

function exportableGroups(groups){
  return _.filter(groups, function(group){
    var cleanName = _.str.clean(group.name)
    return _.str.startsWith(cleanName, '-')
  })
}

function exportGroup(group){
  [progress incrementProgress]

  _.each(Android.factors, function(factor){
    group.export(BASE_DIR + '/src/res/drawable-' + factor.name, factor.scale)
  })

  if ([progress isMaximum]) {
    [NSApp endSheet:[progress window] returnCode:0]
  }
}

function createApp(){
  createGradle()
  createManifest()
  createActivities()
  createLayouts()
}

function createGradle(){
  var outputDir = BASE_DIR + '/'
  createDir(outputDir)

  var outputFile = 'build.gradle'
  writeTemplate(outputFile, outputDir + outputFile, {
    packageName: getString('packageName')
  })
}

function createManifest(){
  var outputDir = BASE_DIR + '/src/'
  createDir(outputDir)

  var initial = getString('rootActivity', 'root')

  var activities = _.filter(Document.artboards(), function(artboard){
    return artboard.name.toString() !== initial
  })

  var outputFile = 'AndroidManifest.xml'
  writeTemplate(outputFile, outputDir + outputFile, {
    packageName: getString('packageName'),
    rootActivity: _.str.classify(_.str.javaId(getString('rootActivity'))) +
      'Activity',
    activities: activities
  })
}

function createActivities(){
  var settings = loadSettings()
    , transitions = settings.transitions
    , packageName = getString('packageName', 'com.example.app')

  var outputDir = BASE_DIR + '/src/java/' +
    packageName.replace(/\./g,'/') + '/activity'

  createDir(outputDir)

  _.each(Document.artboards(), function(artboard){
    var activityName = artboard.activityName
      , groups = exportableGroups(artboard.groups())

    var artboardTransitions = transitions[artboard.name] || {}
      , activityTransitions = []

    for (var key in artboardTransitions) {
      var transition = artboardTransitions[key]
      activityTransitions.push({
        from: _.str.javaId(artboard.name + '_' + key),
        fromSnakeCase: _.str.camelize(key),
        to: _.str.classify(_.str.javaId(transition)) + 'Activity'
      })
    }

    writeTemplate('activity.java', outputDir + '/' + activityName + '.java', {
      packageName: packageName,
      layoutId: artboard.layoutId,
      activityName: activityName,
      groups: groups.reverse(),
      transitions: activityTransitions
    })
  })
}

function createLayouts(){
  _.each(Document.artboards(), createLayout)
}

function createLayout(artboard){
  var outputDir = BASE_DIR + '/src/res/layout/'
  createDir(outputDir)

  var outputFile = 'activity_' + _.str.javaId(artboard.name) + '.xml'
  var groups = exportableGroups(artboard.groups())
  writeTemplate('layout.xml', outputDir + outputFile, {
    groups: groups.reverse()
  })
}

function writeTemplate(tmpl, path, locals){
  locals = locals || {}

  var filePath = PLUGIN_PATH + '/templates/' + tmpl
  var template = [NSString stringWithContentsOfFile:filePath
                                           encoding:NSUTF8StringEncoding
                                              error:null]

  var layout = tim(template, locals)
  layout = [NSString stringWithString:layout]
  [layout writeToFile:path atomically:false]
}

function createDir(path){
  var fm = [NSFileManager defaultManager]
  [fm createDirectoryAtPath:path withIntermediateDirectories:true
                 attributes:null error:null]
}

function cleanup(){
  [[NSFileManager defaultManager] removeItemAtPath:BASE_DIR error:null]
}

function finished(){
  var url = NSURL.fileURLWithPath(BASE_DIR)
  NSWorkspace.sharedWorkspace().openURL(url)
}

function setDPI(){
  var defaults = [NSUserDefaults standardUserDefaults]
  var key = 'sketch-android-kit-dpi'

  var accessory = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,0,200,25)]
  [accessory addItemsWithObjectValues:[
    '0.75 (120dpi)',
    '1 (160dpi)',
    '1.5 (240dpi)',
    '2 (320dpi)'
  ]]

  var dpiKey = [defaults integerForKey:key]
  if (dpiKey) {
    [accessory selectItemAtIndex:dpiKey]
  } else {
    [accessory selectItemAtIndex:1]
  }

  var alert = [[NSAlert alloc] init]
  [alert setMessageText:'Pixel Density']
  [alert setInformativeText:'Please select the device pixel density']
  [alert addButtonWithTitle:'OK']
  [alert addButtonWithTitle:'Cancel']
  [alert setAccessoryView:accessory]
  var returnCode = [alert runModal]

  if (returnCode === 1001) { return false; }

  var choice = [accessory indexOfSelectedItem]
  [defaults setInteger:choice forKey:key]
  dpi = [0.75, 1, 1.5, 2][choice]

  return true
}

function main(){
  if ([doc fileURL] === null) {
    var msg = 'Please save your document.\nThat is where we export your app!'
    return ui.alert(msg, 'Error!')
  }

  var numberOfGroups = Document.numberOfExportableGroups()

  if (numberOfGroups < 1) {
    var msg = 'There are no groups to exports.'
    return ui.alert(msg, 'Error!')
  }

  var success = setDPI()
  if (!success) return;

  cleanup()

  var success = askForPackageName()
  if (!success) return;

  var success = askForRootActivity()
  if (!success) return;

  settings = loadSettings()

  exportGroups(numberOfGroups)
  createApp()
  finished()
}

main()
